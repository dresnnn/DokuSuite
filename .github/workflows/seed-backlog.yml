name: Seed Backlog

on:
  workflow_dispatch:
    inputs:
      path:
        description: "Path to backlog JSON (e.g., .github/backlog-p1.json or .github/backlog-p2.json)"
        required: false
        default: ".github/backlog-p1.json"

permissions:
  contents: read
  issues: write

jobs:
  seed:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create milestone and issues
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const inputPath = (context.payload && context.payload.inputs && context.payload.inputs.path)
              || core.getInput('path')
              || '.github/backlog-p1.json';
            core.info(`Reading backlog from ${inputPath}`);
            const items = JSON.parse(fs.readFileSync(inputPath, 'utf8'));

            const { owner, repo } = context.repo;
            const msTitle = 'MVP v1.0';

            // Ensure milestone exists
            let milestoneNumber = null;
            const { data: milestones } = await github.rest.issues.listMilestones({ owner, repo, state: 'open' });
            const found = milestones.find(m => m.title === msTitle);
            if (found) {
              milestoneNumber = found.number;
            } else {
              const { data: created } = await github.rest.issues.createMilestone({ owner, repo, title: msTitle });
              milestoneNumber = created.number;
            }

            // Check duplicates by exact title via listForRepo
            async function existsByTitle(title) {
              let page = 1;
              while (true) {
                const { data } = await github.rest.issues.listForRepo({ owner, repo, state: 'all', per_page: 100, page });
                if (!data.length) break;
                const hit = data.find(i => !i.pull_request && i.title === title);
                if (hit) return hit;
                page++;
              }
              return null;
            }

            let createdCount = 0, skipped = 0;
            for (const item of items) {
              const dupe = await existsByTitle(item.title);
              if (dupe) {
                core.info(`Skip existing: ${item.title} (#${dupe.number})`);
                skipped++;
                continue;
              }
              await github.rest.issues.create({ owner, repo, title: item.title, body: item.body, labels: item.labels || [], milestone: milestoneNumber });
              core.info(`Created: ${item.title}`);
              createdCount++;
            }

            await core.summary
              .addHeading('Backlog Seeding')
              .addRaw(`Input: ${inputPath}\nCreated: ${createdCount}\nSkipped: ${skipped}\n`)
              .write();
